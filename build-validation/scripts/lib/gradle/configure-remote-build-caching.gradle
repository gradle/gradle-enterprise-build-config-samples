import java.net.URI;

// Don't run against the included builds (if the main build has any).
def isTopLevelBuild = gradle.getParent() == null
if (isTopLevelBuild) {
    settingsEvaluated { settings ->
        settings.buildCache {
            local {
                enabled = false
            }
            remote(HttpBuildCache) {
                enabled = true
                push = false
                def projectProperties = gradle.startParameter.projectProperties
                if (url != null && projectProperties.containsKey("com.gradle.enterprise.build_validation.remoteBuildCacheShard")) {
                    def shard = projectProperties.get("com.gradle.enterprise.build_validation.remoteBuildCacheShard");
                    if ( !url.path.endsWith(shard) ) {
                        url = appendPath(url, projectProperties.get("com.gradle.enterprise.build_validation.remoteBuildCacheShard"))
                    }
                }
            }
        }
    }
}

static String appendIfMissing(String str, String suffix) {
    return str.endsWith(suffix) ? str : str + suffix;
}

static String stripPrefix(String prefix, String string) {
    return string.startsWith(prefix) ? string.substring(prefix.length()) : string;
}

static URI appendPath(URI uri, String path) {
    String normalizedPath = appendIfMissing(stripPrefix("/", path), "/");
    String originalPath = appendIfMissing(Objects.requireNonNullElse(uri.getPath(), "/"), "/");
    return uri.resolve(originalPath).resolve(normalizedPath);
}

